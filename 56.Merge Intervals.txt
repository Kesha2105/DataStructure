// LeetCode : 56 --> Merge Intervals

// Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

// Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

// code : 

class Solution {
    public int[][] merge(int[][] intervals) {
        // sort the array in ascending
        Arrays.sort(intervals , (a,b) -> a[0]-b[0]);

        // create a list for storing a result
        List<int[]> merged = new ArrayList<>();
        // iterate interval array
        for(int interval []: intervals){
        //logic : - interval array last < current interval start --> no overlap [1,2] and [3,6] 2<3 --> no overlap
        // if array empty and above condition ful fill then add the current into result
        if(merged.isEmpty() || merged.get(merged.size()-1)[1] < interval[0]){
            merged.add(interval);
        }
        else{
            merged.get(merged.size()-1)[1] = Math.max(merged.get(merged.size()-1)[1],interval[1]);
        }
        }
        return merged.toArray(new int[merged.size()][]);

    }
}